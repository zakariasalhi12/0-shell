//  let mut fd : Option<u64> = None;
//                     let mut target = String::from("");
//                     if !buffer.is_empty(){
//                         fd = match buffer.parse::<u64>(){
//                             Ok(fd) => Some(fd),
//                             Err(_) =>{
//                                 None
//                             }
//                         }
//                     }
//                     self.chars.next();

//                     while let Some(c) = self.chars.peek()  {
//                         if c.is_alphanumeric() || *c == '&' || *c == '-' || *c == '_'{
//                             target.push(*c);
//                         }else{
//                             break;
//                         }
//                         self.chars.next();
//                     }

//                     tokens.push(Token::Redirect(Redirect{
//                         fd,
//                         kind : RedirectOp::Write,
//                         target : Word { parts: vec![], quote: QuoteType::None }
//                     }));




//                     #[derive(Debug, Clone, PartialEq, Eq)]
